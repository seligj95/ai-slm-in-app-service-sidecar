@page "/inventory"
@layout MainLayout
@using dotnetfashionassistant.Models
@using dotnetfashionassistant.Components.Layout
@using dotnetfashionassistant.Services
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject CartUpdateService CartUpdateService
@rendermode InteractiveServer

<PageTitle>Fashion Store Inventory</PageTitle>

@if (showSuccessToast)
{
    <div class="position-fixed top-0 start-0 w-100 p-0 mt-navbar" style="z-index: 1040">
        <div class="toast show mx-auto bg-success text-white" role="alert" aria-live="assertive" aria-atomic="true" style="max-width: 600px;">
            <div class="toast-header bg-success text-white">
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close btn-close-white" @onclick="() => showSuccessToast = false" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <div class="d-flex align-items-center">
                    <i class="bi bi-check-circle-fill me-2" style="font-size: 1.5rem;"></i>
                    <div>
                        <strong>Item added to cart successfully!</strong>
                        <div class="mt-1">@lastAddedItem</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="inventory-container">
    <div class="inventory-header">
        <h1>Fashion Store</h1>
        <p class="lead text-muted">Browse our latest collection of premium fashion items</p>
        
        @if (errorMessage != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
            </div>
        }    </div>

    <div class="product-grid">
        @foreach (var item in inventory)
        {
            <div class="product-card">
                <div class="product-image">
                    <img src="@GetProductImageUrl(item.ProductId)" alt="@item.ProductName" />
                </div>                <div class="product-info">
                    <h3 class="product-name">@item.ProductName</h3>
                    <div class="product-price">$@item.Price.ToString("0.00")</div>
                      <div class="product-sizes">
                        <span class="size-label">Available Sizes:</span>
                        <div class="size-badges">
                            @foreach (var size in InventoryService.GetSizes())
                            {
                                @if (item.SizeInventory[size] > 0)
                                {
                                    <span class="size-badge @GetStockLevelClass(item.SizeInventory[size])">
                                        @size <span class="size-count">(@item.SizeInventory[size])</span>
                                    </span>
                                }
                                else
                                {
                                    <span class="size-badge out-of-stock">@size <span class="size-count">(0)</span></span>
                                }
                            }
                        </div>
                    </div>
                    
                    <div class="product-actions">
                        @{
                            var availableSizes = GetAvailableSizes(item);
                            var hasSizes = availableSizes.Count > 0;
                        }
                        <div class="select-wrapper">
                            <select class="form-select" 
                                    @bind="selectedSizes[item.ProductId]" 
                                    disabled="@(!hasSizes)">
                                <option value="">@(hasSizes ? "Select Size" : "No Sizes Available")</option>
                                @foreach (var size in availableSizes)
                                {
                                    <option value="@size">@size</option>
                                }
                            </select>
                        </div>
                        
                        <div class="quantity-wrapper">
                            <div class="input-group">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => DecreaseQuantity(item.ProductId)">-</button>
                                <input type="number" class="form-control text-center" 
                                      value="@GetQuantity(item.ProductId)" 
                                      @onchange="@(e => UpdateQuantity(item.ProductId, int.Parse(e.Value?.ToString() ?? "1")))"
                                      min="1" max="99" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => IncreaseQuantity(item.ProductId)">+</button>
                            </div>
                        </div>
                        
                        <button class="btn btn-primary add-to-cart" 
                                @onclick="() => AddToCart(item)" 
                                disabled="@(!CanAddToCart(item))">
                            <i class="bi bi-cart-plus"></i> Add to Cart
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .inventory-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }
    
    .inventory-header {
        text-align: center;
        margin-bottom: 2.5rem;
    }
    
    .inventory-header h1 {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        color: #003057;
    }
    
    .inventory-legend {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
    }
    
    .product-card {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
        background-color: white;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    .product-image {
        height: 200px;
        overflow: hidden;
        background-color: #f5f5f5;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s;
    }
    
    .product-card:hover .product-image img {
        transform: scale(1.05);
    }
    
    .product-info {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }
      .product-name {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #1a1a1a;
        min-height: 2.5rem;
    }
    
    .product-price {
        font-size: 1.2rem;
        font-weight: 700;
        color: #003057;
        margin-bottom: 1rem;
    }
    
    .product-sizes {
        margin-bottom: 1.2rem;
    }
    
    .size-label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        color: #555;
        font-weight: 500;
    }
    
    .size-badges {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }
    
    .size-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
    }
    
    .out-of-stock {
        background-color: #e0e0e0;
        color: #888;
        text-decoration: line-through;
    }
    
    .product-actions {
        margin-top: auto;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }
    
    .select-wrapper {
        margin-bottom: 0.5rem;
    }
    
    .quantity-wrapper {
        margin-bottom: 0.75rem;
    }
    
    .quantity-wrapper .input-group {
        width: 100%;
        max-width: 150px;
        margin: 0 auto;
    }
    
    .add-to-cart {
        padding: 0.5rem 1rem;
        font-weight: 500;
        width: 100%;
    }
    
    .btn-primary {
        background-color: #003057;
        border-color: #003057;
    }
    
    .btn-primary:hover:not(:disabled) {
        background-color: #004880;
        border-color: #004880;
    }
    
    .btn-primary:disabled {
        background-color: #99b3c7;
        border-color: #99b3c7;
    }
    
    /* Stock level colors */
    .bg-success, .bg-success-light {
        background-color: #4caf50 !important;
    }
    
    .bg-warning, .bg-warning-light {
        background-color: #ff9800 !important;
    }
    
    .bg-danger, .bg-danger-light {
        background-color: #f44336 !important;
    }
      /* Toast notification positioning below navbar */
    .mt-navbar {
        margin-top: 80px;
    }
    
    @@media (max-width: 768px) {
        .product-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
        
        .inventory-header h1 {
            font-size: 2rem;
        }
    }
</style>

@code {
    private List<InventoryItem> inventory = null!;
    private Dictionary<int, string> selectedSizes = new Dictionary<int, string>();
    private Dictionary<int, int> quantities = new Dictionary<int, int>();
    private bool showSuccessToast = false;
    private string? errorMessage = null;
    private HttpClient client = null!;
    private string lastAddedItem = "";

    protected override void OnInitialized()
    {
        inventory = InventoryService.GetInventory();
        client = HttpClientFactory.CreateClient("LocalApi");
        
        // Initialize size selections and quantities
        foreach (var item in inventory)
        {
            selectedSizes[item.ProductId] = "";
            quantities[item.ProductId] = 1;
        }
    }

    private string GetStockLevelClass(int count)
    {
        if (count == 0)
            return "out-of-stock";
        if (count < 6)
            return "bg-danger";
        if (count <= 15)
            return "bg-warning";
        return "bg-success";
    }
    
    private List<string> GetAvailableSizes(InventoryItem item)
    {
        return item.SizeInventory
            .Where(s => s.Value > 0)
            .Select(s => s.Key)
            .ToList();
    }
    
    private bool CanAddToCart(InventoryItem item)
    {
        if (!selectedSizes.TryGetValue(item.ProductId, out var selectedSize))
            return false;
            
        if (string.IsNullOrEmpty(selectedSize) || 
            !item.SizeInventory.TryGetValue(selectedSize, out var stock)) 
            return false;
            
        int qty = GetQuantity(item.ProductId);
        return stock >= qty;
    }
    
    private int GetQuantity(int productId)
    {
        if (quantities.TryGetValue(productId, out int qty))
            return qty;
            
        quantities[productId] = 1;
        return 1;
    }
    
    private void IncreaseQuantity(int productId)
    {
        int currentQty = GetQuantity(productId);
        if (currentQty < 99) // Set a reasonable upper limit
        {
            quantities[productId] = currentQty + 1;
        }
    }
    
    private void DecreaseQuantity(int productId)
    {
        int currentQty = GetQuantity(productId);
        if (currentQty > 1)
        {
            quantities[productId] = currentQty - 1;
        }
    }
    
    private void UpdateQuantity(int productId, int quantity)
    {
        // Ensure quantity is within valid range
        if (quantity < 1) 
            quantity = 1;
        if (quantity > 99)
            quantity = 99;
            
        quantities[productId] = quantity;
    }
    
    private string GetProductImageUrl(int productId)
    {
        // Use placeholder images based on product ID to give variety
        return $"https://picsum.photos/seed/{productId}/400/300";
    }
    
    private async Task AddToCart(InventoryItem item)
    {
        errorMessage = null;
        if (!selectedSizes.TryGetValue(item.ProductId, out var size) || string.IsNullOrEmpty(size))
        {
            errorMessage = "Please select a size first";
            return;
        }
        
        int quantity = GetQuantity(item.ProductId);
        
        // Check if enough stock is available
        if (!item.SizeInventory.TryGetValue(size, out int stock) || stock < quantity)
        {
            errorMessage = $"Not enough stock. Only {stock} items available";
            return;
        }
        
        try
        {
            var request = new 
            {
                ProductId = item.ProductId,
                Size = size,
                Quantity = quantity
            };
            
            var response = await client.PostAsJsonAsync("api/Cart/add", request);
            
            if (response.IsSuccessStatusCode)
            {
                // Set the details of the last added item for the toast notification
                lastAddedItem = $"{quantity} x {item.ProductName} (Size: {size})";
                showSuccessToast = true;
                
                // Reset quantity to 1 after successful add
                quantities[item.ProductId] = 1;
                
                // Update cart counter immediately using JavaScript interop
                await UpdateCartCounterDisplay(response);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to add item to cart: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
      private async Task UpdateCartCounterDisplay(HttpResponseMessage response)
    {
        try
        {
            // Get the updated cart summary from the API response
            var cartSummary = await response.Content.ReadFromJsonAsync<CartSummary>();
            
            // Calculate the new cart count
            int newCount = cartSummary?.Items?.Sum(item => item.Quantity) ?? 0;
            
            // Use JavaScript interop to update the cart badge in real-time
            await JSRuntime.InvokeVoidAsync("updateCartBadge", newCount);
            
            // Notify other components (like MainLayout) about cart update
            CartUpdateService.NotifyCartUpdated();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating cart counter: {ex.Message}");
            // Silently fail if we can't update the counter
        }
    }
}
