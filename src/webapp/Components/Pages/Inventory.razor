@page "/inventory"
@layout MainLayout
@using dotnetfashionassistant.Models
@using dotnetfashionassistant.Components.Layout;
@using dotnetfashionassistant.Services
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject CartUpdateService CartUpdateService
@rendermode InteractiveServer

<PageTitle>Fashion Store Inventory</PageTitle>

<div class="container">
    <div class="content">
        <h1 class="page-title">Fashion Store Inventory</h1>        @if (showSuccessToast)
        {
            <div class="position-fixed top-0 start-0 w-100 p-0 mt-navbar" style="z-index: 1040">
                <div class="toast show mx-auto bg-success text-white" role="alert" aria-live="assertive" aria-atomic="true" style="max-width: 600px;">
                    <div class="toast-header bg-success text-white">
                        <strong class="me-auto">Success</strong>
                        <button type="button" class="btn-close btn-close-white" @onclick="() => showSuccessToast = false" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-check-circle-fill me-2" style="font-size: 1.5rem;"></i>
                            <div>
                                <strong>Item added to cart successfully!</strong>
                                <div class="mt-1">@lastAddedItem</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        @if (errorMessage != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
            </div>
        }
  

        <div class="table-responsive">
            <table class="table table-striped table-bordered inventory-table">
                <thead class="table-dark">
                    <tr>
                        <th>Product</th>
                        @foreach (var size in InventoryService.GetSizes())
                        {
                            <th>@size</th>
                        }
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in inventory)
                    {
                        <tr>
                            <td class="product-name">@item.ProductName</td>
                            @foreach (var size in InventoryService.GetSizes())
                            {
                                <td class="@GetStockLevelClass(item.SizeInventory[size])">
                                    @item.SizeInventory[size]
                                </td>
                            }                            <td>                                <div class="d-flex flex-column gap-2">
                                    @{
                                        var availableSizes = GetAvailableSizes(item);
                                        var hasSizes = availableSizes.Count > 0;
                                    }
                                    <select class="form-select form-select-sm" 
                                            @bind="selectedSizes[item.ProductId]" 
                                            disabled="@(!hasSizes)">
                                        <option value="">@(hasSizes ? "Select Size" : "No Sizes Available")</option>
                                        @foreach (var size in availableSizes)
                                        {
                                            <option value="@size">@size</option>
                                        }
                                    </select>
                                    
                                    <div class="d-flex align-items-center">
                                        <div class="input-group input-group-sm me-2">
                                            <button class="btn btn-outline-secondary" type="button" @onclick="() => DecreaseQuantity(item.ProductId)">-</button>
                                            <input type="number" class="form-control text-center" 
                                                  value="@GetQuantity(item.ProductId)" 
                                                  @onchange="@(e => UpdateQuantity(item.ProductId, int.Parse(e.Value?.ToString() ?? "1")))"
                                                  min="1" max="99" style="width: 45px;" />
                                            <button class="btn btn-outline-secondary" type="button" @onclick="() => IncreaseQuantity(item.ProductId)">+</button>
                                        </div>
                                        <button class="btn btn-sm btn-success" 
                                                @onclick="() => AddToCart(item)" 
                                                disabled="@(!CanAddToCart(item))">
                                            <i class="bi bi-cart-plus"></i> Add
                                        </button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }                </tbody>
            </table>
        </div>
        
        <div class="legend mt-3">
            <h6>Stock Level Legend:</h6>
            <div class="d-flex flex-wrap">
                <div class="legend-item">
                    <span class="legend-color bg-danger"></span> Low Stock (&lt; 6)
                </div>
                <div class="legend-item">
                    <span class="legend-color bg-warning"></span> Medium Stock (6-15)
                </div>
                <div class="legend-item">
                    <span class="legend-color bg-success"></span> Good Stock (> 15)
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Center and top align the container */
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        min-height: 100vh;
        padding: 20px;
        text-align: center;
    }

    /* Narrow the heading */
    .page-title {
        font-size: 1.5em;
        margin-bottom: 0.5em;
        width: 100%;
        max-width: 800px;
        text-align: center;
    }

    /* Content styling */
    .content {
        width: 100%;
        max-width: 800px;
        text-align: left;
    }

    .inventory-table {
        margin-top: 20px;
    }

    .product-name {
        font-weight: 500;
        max-width: 300px;
    }

    /* Legend styling */
    .legend {
        margin-top: 20px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 10px;
        background-color: #f8f9fa;
    }

    .legend-item {
        display: flex;
        align-items: center;
        margin-right: 20px;
        margin-bottom: 5px;
    }    .legend-color {
        display: inline-block;
        width: 20px;
        height: 20px;
        margin-right: 5px;
        border-radius: 3px;
    }
    
    /* Positioning for toast notification below navbar */
    .mt-navbar {
        margin-top: 80px; /* Matches the height of the navigation bar */
    }
</style>

@code {
    private List<InventoryItem> inventory = null!;
    private Dictionary<int, string> selectedSizes = new Dictionary<int, string>();
    private Dictionary<int, int> quantities = new Dictionary<int, int>();
    private bool showSuccessToast = false;
    private string? errorMessage = null;
    private HttpClient client;

    protected override void OnInitialized()
    {
        inventory = InventoryService.GetInventory();
        client = HttpClientFactory.CreateClient("LocalApi");
        
        // Initialize size selections and quantities
        foreach (var item in inventory)
        {
            selectedSizes[item.ProductId] = "";
            quantities[item.ProductId] = 1;
        }
    }

    private string GetStockLevelClass(int count)
    {
        if (count < 6)
            return "bg-danger text-white";
        if (count <= 15)
            return "bg-warning";
        return "bg-success text-white";
    }
    
    private List<string> GetAvailableSizes(InventoryItem item)
    {
        return item.SizeInventory
            .Where(s => s.Value > 0)
            .Select(s => s.Key)
            .ToList();
    }
    
    private bool CanAddToCart(InventoryItem item)
    {
        if (!selectedSizes.TryGetValue(item.ProductId, out var selectedSize))
            return false;
            
        if (string.IsNullOrEmpty(selectedSize) || 
            !item.SizeInventory.TryGetValue(selectedSize, out var stock)) 
            return false;
            
        int qty = GetQuantity(item.ProductId);
        return stock >= qty;
    }
    
    private int GetQuantity(int productId)
    {
        if (quantities.TryGetValue(productId, out int qty))
            return qty;
            
        quantities[productId] = 1;
        return 1;
    }
    
    private void IncreaseQuantity(int productId)
    {
        int currentQty = GetQuantity(productId);
        if (currentQty < 99) // Set a reasonable upper limit
        {
            quantities[productId] = currentQty + 1;
        }
    }
    
    private void DecreaseQuantity(int productId)
    {
        int currentQty = GetQuantity(productId);
        if (currentQty > 1)
        {
            quantities[productId] = currentQty - 1;
        }
    }
    
    private void UpdateQuantity(int productId, int quantity)
    {
        // Ensure quantity is within valid range
        if (quantity < 1) 
            quantity = 1;
        if (quantity > 99)
            quantity = 99;
            
        quantities[productId] = quantity;
    }
      private string lastAddedItem = "";
    
    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }
    
    private async Task AddToCart(InventoryItem item)
    {
        errorMessage = null;
        if (!selectedSizes.TryGetValue(item.ProductId, out var size) || string.IsNullOrEmpty(size))
        {
            errorMessage = "Please select a size first";
            return;
        }
        
        int quantity = GetQuantity(item.ProductId);
        
        // Check if enough stock is available
        if (!item.SizeInventory.TryGetValue(size, out int stock) || stock < quantity)
        {
            errorMessage = $"Not enough stock. Only {stock} items available";
            return;
        }
        
        try
        {
            var request = new 
            {
                ProductId = item.ProductId,
                Size = size,
                Quantity = quantity
            };
            
            var response = await client.PostAsJsonAsync("api/Cart/add", request);
            
            if (response.IsSuccessStatusCode)
            {
                // Set the details of the last added item for the toast notification
                lastAddedItem = $"{quantity} x {item.ProductName} (Size: {size})";
                showSuccessToast = true;
                
                // Reset quantity to 1 after successful add
                quantities[item.ProductId] = 1;
                
                // Update cart counter immediately using JavaScript interop
                await UpdateCartCounterDisplay(response);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to add item to cart: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    
    private void ViewCart()
    {
        NavigationManager.NavigateTo("/cart");
    }
    
    private async Task UpdateCartCounterDisplay(HttpResponseMessage response)
    {
        try
        {
            // Get the updated cart items from the API response
            var updatedCart = await response.Content.ReadFromJsonAsync<List<CartItem>>();
            
            // Calculate the new cart count
            int newCount = updatedCart?.Sum(item => item.Quantity) ?? 0;
            
            // Use JavaScript interop to update the cart badge in real-time
            await JSRuntime.InvokeVoidAsync("updateCartBadge", newCount);
        }
        catch
        {
            // Silently fail if we can't update the counter
        }
    }
}
