@page "/cart"
@layout MainLayout
@using dotnetfashionassistant.Models
@using dotnetfashionassistant.Components.Layout;
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Shopping Cart</PageTitle>

<div class="container">
    <div class="content">
        <h1 class="page-title">Your Shopping Cart</h1>

        @if (isLoading)
        {
            <div class="spinner-container">
                <Spinner Color="SpinnerColor.Primary" />
            </div>
        }
        else if (cartItems.Count == 0)
        {
            <div class="empty-cart">
                <i class="bi bi-cart-x empty-cart-icon"></i>
                <p>Your cart is empty</p>
                <button class="btn btn-primary" @onclick="NavigateToInventory">Continue Shopping</button>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered cart-table">
                    <thead class="table-dark">
                        <tr>
                            <th>Product</th>
                            <th>Size</th>
                            <th>Quantity</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in cartItems)
                        {
                            <tr>
                                <td class="product-name">@item.ProductName</td>
                                <td>@item.Size</td>
                                <td>
                                    <div class="quantity-selector">
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => DecreaseQuantity(item)" disabled="@(item.Quantity <= 1)">-</button>
                                        <span class="quantity-value">@item.Quantity</span>
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => IncreaseQuantity(item)">+</button>
                                    </div>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item)">
                                        <i class="bi bi-trash"></i> Remove
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="cart-actions">
                <button class="btn btn-secondary" @onclick="NavigateToInventory">Continue Shopping</button>
                <button class="btn btn-danger" @onclick="ClearCart">Clear Cart</button>
            </div>
        }
    </div>
</div>

<style>
    /* Center and top align the container */
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        min-height: 100vh;
        padding: 20px;
        text-align: center;
    }

    /* Narrow the heading */
    .page-title {
        font-size: 1.5em;
        margin-bottom: 0.5em;
        width: 100%;
        max-width: 800px;
        text-align: center;
    }

    /* Content styling */
    .content {
        width: 100%;
        max-width: 800px;
        text-align: left;
    }

    .cart-table {
        margin-top: 20px;
    }

    .product-name {
        font-weight: 500;
        max-width: 300px;
    }
    
    .cart-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-value {
        margin: 0 10px;
        font-weight: bold;
        min-width: 30px;
        text-align: center;
    }

    .empty-cart {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin-top: 50px;
    }

    .empty-cart-icon {
        font-size: 60px;
        color: #6c757d;
        margin-bottom: 20px;
    }

    .empty-cart p {
        font-size: 18px;
        margin-bottom: 20px;
        color: #6c757d;
    }

    .spinner-container {
        display: flex;
        justify-content: center;
        margin-top: 50px;
    }
</style>

@code {
    private List<CartItem> cartItems = new List<CartItem>();
    private bool isLoading = true;
    private HttpClient client;

    protected override async Task OnInitializedAsync()
    {
        client = HttpClientFactory.CreateClient("LocalApi");
        await LoadCart();
    }

    private async Task LoadCart()
    {
        isLoading = true;
        try
        {
            cartItems = await client.GetFromJsonAsync<List<CartItem>>("api/Cart") ?? new List<CartItem>();
        }
        catch (Exception ex)
        {
            // Handle error (in a real app, you'd want to log this or display to user)
            Console.WriteLine($"Error loading cart: {ex.Message}");
            cartItems = new List<CartItem>();
        }
        isLoading = false;
    }    private async Task IncreaseQuantity(CartItem item)
    {
        isLoading = true;
        try
        {
            var request = new { Quantity = item.Quantity + 1 };
            var response = await client.PutAsJsonAsync($"api/Cart/{item.ProductId}/size/{item.Size}", request);
            
            if (response.IsSuccessStatusCode)
            {
                cartItems = await response.Content.ReadFromJsonAsync<List<CartItem>>() ?? new List<CartItem>();
                
                // Update cart counter immediately
                await UpdateCartCounterDisplay();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                // In a real app, display this error to user
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error updating quantity: {ex.Message}");
        }
        isLoading = false;
    }    private async Task DecreaseQuantity(CartItem item)
    {
        if (item.Quantity <= 1) return;
        
        isLoading = true;
        try
        {
            var request = new { Quantity = item.Quantity - 1 };
            var response = await client.PutAsJsonAsync($"api/Cart/{item.ProductId}/size/{item.Size}", request);
            
            if (response.IsSuccessStatusCode)
            {
                cartItems = await response.Content.ReadFromJsonAsync<List<CartItem>>() ?? new List<CartItem>();
                
                // Update cart counter immediately
                await UpdateCartCounterDisplay();
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error updating quantity: {ex.Message}");
        }
        isLoading = false;
    }    private async Task RemoveItem(CartItem item)
    {
        isLoading = true;
        try
        {
            var response = await client.DeleteAsync($"api/Cart/{item.ProductId}/size/{item.Size}");
            if (response.IsSuccessStatusCode)
            {
                cartItems = await response.Content.ReadFromJsonAsync<List<CartItem>>() ?? new List<CartItem>();
                
                // Update cart counter immediately
                await UpdateCartCounterDisplay();
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error removing item: {ex.Message}");
        }
        isLoading = false;
    }    private async Task ClearCart()
    {
        isLoading = true;
        try
        {
            var response = await client.DeleteAsync("api/Cart");
            if (response.IsSuccessStatusCode)
            {
                cartItems.Clear();
                
                // Update cart counter immediately (will be 0 since cart is cleared)
                await UpdateCartCounterDisplay();
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error clearing cart: {ex.Message}");
        }
        isLoading = false;
    }

    private void NavigateToInventory()
    {
        NavigationManager.NavigateTo("/inventory");
    }
    
    // Method to update the cart counter immediately using JavaScript
    private async Task UpdateCartCounterDisplay()
    {
        try
        {
            // Calculate the total quantity of items in the cart
            int totalQuantity = cartItems?.Sum(item => item.Quantity) ?? 0;
            
            // Use JavaScript interop to update the cart badge in real-time
            await JSRuntime.InvokeVoidAsync("updateCartBadge", totalQuantity);
        }
        catch
        {
            // Silently fail if we can't update the counter
        }
    }
}
