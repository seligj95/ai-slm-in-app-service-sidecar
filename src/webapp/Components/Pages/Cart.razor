@page "/cart"
@layout MainLayout
@using dotnetfashionassistant.Models
@using dotnetfashionassistant.Components.Layout
@using dotnetfashionassistant.Services
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject CartUpdateService CartUpdateService
@rendermode InteractiveServer

<PageTitle>Shopping Cart</PageTitle>

<div class="cart-container">
    <div class="cart-header">
        <h1>Your Shopping Cart</h1>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading your cart...</p>
        </div>
    }
    else if (cartItems.Count == 0)
    {
        <div class="empty-cart">
            <div class="empty-cart-icon">
                <i class="bi bi-cart-x"></i>
            </div>
            <h3>Your cart is empty</h3>
            <p>Looks like you haven't added any items to your cart yet.</p>
            <button class="btn btn-primary btn-lg shop-now" @onclick="NavigateToInventory">
                Shop Now
            </button>
        </div>
    }
    else
    {
        <div class="cart-content">
            <div class="cart-items">
                @foreach (var item in cartItems)
                {
                    <div class="cart-item">
                        <div class="cart-item-image">
                            <img src="@GetProductImageUrl(item.ProductId)" alt="@item.ProductName" />
                        </div>
                        <div class="cart-item-details">                            <h3>@item.ProductName</h3>
                            <div class="cart-item-meta">
                                <span class="item-size">Size: <strong>@item.Size</strong></span>
                                <span class="item-price">Price: <strong>$@item.Price.ToString("0.00")</strong></span>
                            </div>
                            <div class="item-quantity-control">
                                <div class="input-group">
                                    <button class="btn btn-outline-secondary" @onclick="() => DecreaseQuantity(item)" disabled="@(item.Quantity <= 1)">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <input type="text" class="form-control text-center" value="@item.Quantity" readonly />
                                    <button class="btn btn-outline-secondary" @onclick="() => IncreaseQuantity(item)">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="cart-item-actions">
                            <button class="btn btn-link text-danger remove-item" @onclick="() => RemoveItem(item)">
                                <i class="bi bi-trash"></i> Remove
                            </button>
                        </div>
                    </div>
                }
            </div>
            
            <div class="cart-summary">                <div class="cart-totals">
                    <div class="cart-total-row">
                        <span>Items (@cartItems.Sum(i => i.Quantity)):</span>
                        <span class="value">$@CalculateSubtotal().ToString("0.00")</span>
                    </div>
                    <div class="cart-total-row total">
                        <span>Order Total:</span>
                        <span class="value">$@CalculateSubtotal().ToString("0.00")</span>
                    </div>
                </div>
                
                <div class="cart-actions">
                    <button class="btn btn-primary btn-lg checkout-btn" @onclick="Checkout">
                        Proceed to Checkout
                    </button>
                    <button class="btn btn-outline-secondary continue-shopping" @onclick="NavigateToInventory">
                        Continue Shopping
                    </button>
                    <button class="btn btn-danger clear-cart" @onclick="ClearCart">
                        <i class="bi bi-trash"></i> Clear Cart
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .cart-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }
    
    .cart-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .cart-header h1 {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        color: #003057;
    }
    
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem 0;
    }
    
    .loading-container p {
        margin-top: 1rem;
        color: #666;
    }
    
    .empty-cart {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 4rem 0;
    }
    
    .empty-cart-icon {
        font-size: 5rem;
        color: #ccc;
        margin-bottom: 1rem;
    }
    
    .empty-cart h3 {
        font-size: 1.8rem;
        margin-bottom: 0.5rem;
        color: #333;
    }
    
    .empty-cart p {
        color: #666;
        margin-bottom: 2rem;
        max-width: 400px;
    }
    
    .shop-now {
        padding: 0.75rem 2rem;
    }
    
    .cart-content {
        display: grid;
        grid-template-columns: 3fr 1fr;
        gap: 2rem;
    }
    
    .cart-items {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    
    .cart-item {
        display: flex;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        overflow: hidden;
        background-color: white;
    }
    
    .cart-item-image {
        width: 120px;
        height: 120px;
        flex-shrink: 0;
        overflow: hidden;
    }
    
    .cart-item-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .cart-item-details {
        padding: 1rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    
    .cart-item-details h3 {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
        color: #1a1a1a;
    }
    
    .cart-item-meta {
        margin-bottom: 0.75rem;
        color: #555;
        font-size: 0.9rem;
    }
    
    .item-quantity-control {
        max-width: 140px;
    }
    
    .cart-item-actions {
        display: flex;
        align-items: flex-start;
        padding: 1rem;
    }
    
    .remove-item {
        text-decoration: none;
    }
    
    .cart-summary {
        background-color: #f5f5f5;
        border-radius: 8px;
        padding: 1.5rem;
        height: fit-content;
    }
    
    .cart-totals {
        margin-bottom: 1.5rem;
    }
    
    .cart-total-row {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px dashed #e0e0e0;
        color: #444;
    }
      .cart-total-row.total {
        font-size: 1.2rem;
        font-weight: bold;
        color: #000;
        border-bottom: none;
        padding-top: 0.5rem;
    }
    
    .cart-actions {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    
    .checkout-btn {
        padding: 0.75rem 0;
        font-weight: 500;
        background-color: #003057;
        border-color: #003057;
    }
    
    .checkout-btn:hover {
        background-color: #004880;
        border-color: #004880;
    }
    
    .continue-shopping {
        padding: 0.5rem 0;
    }
      .clear-cart {
        padding: 0.5rem 0;
    }
    
    @@media (max-width: 992px) {
        .cart-content {
            grid-template-columns: 1fr;
        }
    }
    
    @@media (max-width: 768px) {
        .cart-item {
            flex-direction: column;
        }
        
        .cart-item-image {
            width: 100%;
            height: 180px;
        }
        
        .cart-header h1 {
            font-size: 2rem;
        }
    }
</style>

@code {
    private List<CartItem> cartItems = new List<CartItem>();
    private decimal totalCost = 0;
    private bool isLoading = true;
    private HttpClient client = null!;    protected override async Task OnInitializedAsync()
    {
        client = HttpClientFactory.CreateClient("LocalApi");
        await LoadCart();
        
        // Start polling for cart updates
        StartCartPolling();
    }
    
    private System.Threading.Timer? _pollingTimer;

    private async Task LoadCart()
    {
        isLoading = true;
        try
        {
            var cartSummary = await client.GetFromJsonAsync<CartSummary>("api/Cart");
            if (cartSummary != null)
            {
                cartItems = cartSummary.Items;
                totalCost = cartSummary.TotalCost;
            }
            else
            {
                cartItems = new List<CartItem>();
                totalCost = 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart: {ex.Message}");
            cartItems = new List<CartItem>();
            totalCost = 0;
        }
        isLoading = false;
    }    private string GetProductImageUrl(int productId)
    {
        // Map product IDs to specific image files that match the product descriptions
        switch (productId)
        {
            case 3:
                return "/images/products/navy-blazer.jpeg"; // Navy Single-Breasted Slim Fit Formal Blazer
            case 111:
                return "/images/products/white-navy-shirt.jpeg"; // White & Navy Blue Slim Fit Printed Casual Shirt
            case 116:
                return "/images/products/red-checked-shirt.jpeg"; // Red Slim Fit Checked Casual Shirt
            case 10:
                return "/images/products/denim-jacket.jpeg"; // Navy Blue Washed Denim Jacket
            default:
                // Fallback to a placeholder if the product ID is not recognized
                return $"https://picsum.photos/seed/{productId}/400/228";
        }
    }private decimal CalculateSubtotal()
    {
        return cartItems.Sum(item => item.Quantity * item.Price);
    }    private async Task IncreaseQuantity(CartItem item)
    {
        isLoading = true;
        try
        {
            var request = new { Quantity = item.Quantity + 1 };
            var response = await client.PutAsJsonAsync($"api/Cart/{item.ProductId}/size/{item.Size}", request);
            
            if (response.IsSuccessStatusCode)
            {
                var cartSummary = await response.Content.ReadFromJsonAsync<CartSummary>();
                if (cartSummary != null)
                {
                    cartItems = cartSummary.Items;
                    totalCost = cartSummary.TotalCost;
                    
                    // Update cart counter immediately
                    await UpdateCartCounterDisplay();
                    // Notify other components about cart update
                    CartUpdateService.NotifyCartUpdated();
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating quantity: {ex.Message}");
        }
        isLoading = false;
    }    private async Task DecreaseQuantity(CartItem item)
    {
        if (item.Quantity <= 1) return;
        
        isLoading = true;
        try
        {
            var request = new { Quantity = item.Quantity - 1 };
            var response = await client.PutAsJsonAsync($"api/Cart/{item.ProductId}/size/{item.Size}", request);
            
            if (response.IsSuccessStatusCode)
            {
                var cartSummary = await response.Content.ReadFromJsonAsync<CartSummary>();
                if (cartSummary != null)
                {
                    cartItems = cartSummary.Items;
                    totalCost = cartSummary.TotalCost;
                    
                    // Update cart counter immediately
                    await UpdateCartCounterDisplay();
                    // Notify other components about cart update
                    CartUpdateService.NotifyCartUpdated();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating quantity: {ex.Message}");
        }
        isLoading = false;
    }    private async Task RemoveItem(CartItem item)
    {
        isLoading = true;
        try
        {
            var response = await client.DeleteAsync($"api/Cart/{item.ProductId}/size/{item.Size}");
            if (response.IsSuccessStatusCode)
            {
                var cartSummary = await response.Content.ReadFromJsonAsync<CartSummary>();
                if (cartSummary != null)
                {
                    cartItems = cartSummary.Items;
                    totalCost = cartSummary.TotalCost;
                    
                    // Update cart counter immediately
                    await UpdateCartCounterDisplay();
                    // Notify other components about cart update
                    CartUpdateService.NotifyCartUpdated();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing item: {ex.Message}");
        }
        isLoading = false;
    }    private async Task ClearCart()
    {
        isLoading = true;
        try
        {
            var response = await client.DeleteAsync("api/Cart");
            if (response.IsSuccessStatusCode)
            {
                var cartSummary = await response.Content.ReadFromJsonAsync<CartSummary>();
                if (cartSummary != null)
                {
                    cartItems = cartSummary.Items;
                    totalCost = cartSummary.TotalCost;
                }
                else
                {
                    cartItems.Clear();
                    totalCost = 0;
                }
                
                // Update cart counter immediately (will be 0 since cart is cleared)
                await UpdateCartCounterDisplay();
                // Notify other components about cart update
                CartUpdateService.NotifyCartUpdated();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing cart: {ex.Message}");
        }
        isLoading = false;
    }

    private void NavigateToInventory()
    {
        NavigationManager.NavigateTo("/inventory");
    }
      private void Checkout()
    {
        // In a real application, this would navigate to a checkout page
        // For now, just show an alert
        JSRuntime.InvokeVoidAsync("alert", "Checkout functionality is not implemented in this demo.");
    }
    
    // Method to start polling for cart updates
    private void StartCartPolling()
    {
        // Poll every 3 seconds for cart updates
        _pollingTimer = new System.Threading.Timer(async _ =>
        {
            await CheckForCartUpdates();
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(3));
    }
    
    private async Task CheckForCartUpdates()
    {
        try
        {
            var cartSummary = await client.GetFromJsonAsync<CartSummary>("api/Cart");
            if (cartSummary != null)
            {
                // Check if there are any differences between the current cart and the new cart
                bool hasChanged = false;
                
                // Check if item count changed
                if (cartSummary.Items.Count != cartItems.Count)
                {
                    hasChanged = true;
                }
                else
                {
                    // Check for changes in quantity or price of items
                    foreach (var newItem in cartSummary.Items)
                    {
                        var existingItem = cartItems.FirstOrDefault(i => 
                            i.ProductId == newItem.ProductId && i.Size == newItem.Size);
                            
                        if (existingItem == null || existingItem.Quantity != newItem.Quantity || existingItem.Price != newItem.Price)
                        {
                            hasChanged = true;
                            break;
                        }
                    }
                }
                
                // If cart has changed, update UI and notify components
                if (hasChanged)
                {
                    await InvokeAsync(async () =>
                    {
                        cartItems = cartSummary.Items;
                        totalCost = cartSummary.TotalCost;
                        
                        // Update cart counter immediately
                        await UpdateCartCounterDisplay();
                        // Notify other components about cart update
                        CartUpdateService.NotifyCartUpdated();
                        
                        StateHasChanged();
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking for cart updates: {ex.Message}");
        }
    }
    
    // IDisposable implementation to clean up the timer
    public void Dispose()
    {
        _pollingTimer?.Dispose();
    }
    
    // Method to update the cart counter immediately using JavaScript
    private async Task UpdateCartCounterDisplay()
    {
        try
        {
            // Calculate the total quantity of items in the cart
            int totalQuantity = cartItems?.Sum(item => item.Quantity) ?? 0;
            
            // Use JavaScript interop to update the cart badge in real-time
            await JSRuntime.InvokeVoidAsync("updateCartBadge", totalQuantity);
        }
        catch
        {
            // Silently fail if we can't update the counter
        }
    }
}
