@page "/"
@layout MainLayout
@using dotnetfashionassistant.Components.Layout;
@using Microsoft.Extensions.Configuration
@using Microsoft.Net.Http.Headers
@using System.Text
@using System.Text.Json
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration configuration

<PageTitle>Fashion Store Assistant</PageTitle>

<div class="container">
    <div class="content">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="page-title mb-0">Fashion Store Assistant</h1>
            <div class="mode-toggle-container">
                <div class="form-check form-switch mode-toggle">
                    <input class="form-check-input" type="checkbox" @bind="useAzureAIAgent" id="flexSwitchCheckDefault">
                    <label class="form-check-label fw-bold" for="flexSwitchCheckDefault">
                        @(useAzureAIAgent ? "Azure AI Agent Mode" : "Phi-3 Sidecar Mode")
                    </label>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="sltProduct" class="form-label">Select a product</label>
            <select id="sltProduct" @bind="selectedProduct" class="form-control">
                <option value="">Please select...</option>
                @foreach (var product in products)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="txtQuery" class="form-label">What would you like to know?</label>
            <textarea @bind="message" class="form-control" id="txtQuery" rows="3" cols="40"></textarea>
        </div>

        <div class="form-group text-end">
            <button class="btn btn-primary" @onclick="Send" disabled="@isLoading">Send</button>
        </div>
    </div>    @if (isLoading)
    {
        <div class="spinner-container">
            <Spinner Color="SpinnerColor.Primary" />
        </div>
    }
    
    <div class="card mt-3 fixed-card">
        <div class="card-body fixed-card-body">
            <p>@((MarkupString)(response ?? ""))</p>
        </div>
    </div>
</div>

<style>
    /* Center and top align the container */
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        min-height: 100vh;
        padding: 20px;
        text-align: center;
    }

    /* Narrow the heading */
    .page-title {
        font-size: 1.5em;
        width: auto;
        text-align: left;
    }

    /* Content styling */
    .content {
        width: 100%;
        max-width: 600px;
        text-align: left;
    }

    .form-group {
        margin-bottom: 15px;
        display: flex;
        flex-direction: column;
    }

    .form-label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 10px;
    }

    /* Mode toggle styling */
    .mode-toggle-container {
        padding: 8px 12px;
        background-color: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .mode-toggle .form-check-input {
        width: 3rem;
        height: 1.5rem;
        margin-right: 8px;
    }

    .mode-toggle .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .mode-toggle .form-check-label {
        font-size: 1rem;
        padding-top: 2px;
    }

    /* Spinner styling */
    .spinner-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    /* Fixed length for card body */
    .fixed-card {
        width: 100%;
        max-width: 600px;
    }

    .fixed-card-body {
        max-width: 550px;
        margin: 0 auto;
        padding: 15px;
        text-align: left;
        word-wrap: break-word;
    }
</style>

@code {
    protected readonly IConfiguration? _config;
    private string? message { get; set; }
    private string? response;
    private string? selectedProduct { get; set; }
    private bool isLoading;
    private bool useAzureAIAgent = false; // Toggle for AI mode

    private async Task Send()
    {
        response = string.Empty;
        isLoading = true;        if (string.IsNullOrEmpty(selectedProduct))
        {
            response = "Please select a product first.";
            isLoading = false;
            return;
        }
        
        // Use null-conditional operator to safely handle potential null result
        Product? selectedItem = products.Find(p => p.Id == int.Parse(selectedProduct));
        
        // Check if product was found
        if (selectedItem == null)
        {
            response = "Product not found. Please select a different product.";
            isLoading = false;
            return;
        }

        if (useAzureAIAgent)
        {
            // Azure AI Agent Service mode (not yet implemented, using placeholder response)
            await Task.Delay(500); // Simulate a brief processing delay
            response = $"<b>Azure AI Agent Service Response:</b><br><br>I'm analyzing {selectedItem.Name}.<br><br>This feature will be fully implemented soon. For now, I can tell you that this is a high-quality product suitable for various occasions.<br><br>Feel free to ask more specific questions once this mode is fully implemented!";
        }
        else
        {
            // Original Phi-3 Sidecar mode
            var request = new HttpRequestMessage(HttpMethod.Post, configuration["FashionAssistantAPI:Url"] ?? throw new InvalidOperationException("FashionAssistantAPI:Url configuration is missing"));
            request.Headers.Add(HeaderNames.Accept, "application/json");
            var queryData = new Dictionary<string, string>
            {
                {"user_message", message ?? string.Empty},
                {"product_name", selectedItem.Name},
                {"product_description", selectedItem.Description }
            };

            request.Content = new StringContent(JsonSerializer.Serialize(queryData), Encoding.UTF8, "application/json");

            var client = HttpClientFactory.CreateClient();
            client.Timeout = TimeSpan.FromSeconds(120);

            using (HttpResponseMessage responseMessage = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))
            {
                responseMessage.EnsureSuccessStatusCode();

                if (responseMessage.Content is object)
                {
                    using (Stream streamToReadFrom = await responseMessage.Content.ReadAsStreamAsync())
                    {
                        using (StreamReader reader = new StreamReader(streamToReadFrom))
                        {
                            char[] buffer = new char[8192];
                            int bytesRead;
                            while ((bytesRead = await reader.ReadAsync(buffer, 0, buffer.Length)) > 0)
                            {
                                response += new string(buffer, 0, bytesRead);
                                StateHasChanged();
                            }
                        }
                    }
                }
            }
            
            // Format the response to display list items on separate lines
            response = response.Replace("1.", "<br>1.")
                              .Replace("2.", "<br>2.")
                              .Replace("3.", "<br>3.")
                              .Replace("4.", "<br>4.")
                              .Replace("5.", "<br>5.")
                              .Replace("-", "<br>-");
        }
        
        isLoading = false;
    }

    public static readonly List<Product> products = new List<Product>()
    {
        new Product { Id = 3, Name = "Navy Single-Breasted Slim Fit Formal Blazer", Description = "This navy single-breasted slim fit formal blazer is made from a blend of polyester and viscose. It features a notched lapel, a chest welt pocket, two flap pockets, a front button fastening, long sleeves, button cuffs, a double vent to the rear, and a full lining." },
        new Product { Id = 111, Name = "White & Navy Blue Slim Fit Printed Casual Shirt", Description = "White and navy blue printed casual shirt, has a spread collar, short sleeves, button placket, curved hem, one patch pocket" },
        new Product { Id = 116, Name = "Red Slim Fit Checked Casual Shirt", Description = "Red checked casual shirt, has a spread collar, long sleeves, button placket, curved hem, one patch pocket" },
        new Product { Id = 10, Name = "Navy Blue Washed Denim Jacket", Description = "Navy Blue washed denim jacket, has a spread collar, 4 pockets, button closure, long sleeves, straight hem, and unlined" }
    };    public class Product
    {
        public int Id { get; set; }
        public required string Name { get; set; }
        public required string Description { get; set; }

        public Product GetProduct(int Id) => products.Find(products => products.Id == Id) ?? throw new InvalidOperationException("Product not found");
    }
}
