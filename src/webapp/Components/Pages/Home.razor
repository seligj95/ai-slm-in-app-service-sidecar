@page "/"
@layout MainLayout
@using dotnetfashionassistant.Components.Layout;
@using Microsoft.Extensions.Configuration
@using Microsoft.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using dotnetfashionassistant.Models
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration configuration
@inject IJSRuntime JSRuntime
@inject dotnetfashionassistant.Services.AzureAIAgentService AzureAIAgentService
@inject dotnetfashionassistant.Services.AgentModeService AgentModeService

<PageTitle>Fashion Store Assistant</PageTitle>

<div class="container">
    <div class="content">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="page-title mb-0">Fashion Store Assistant</h1>            <div class="mode-toggle-container">
                <div class="form-check form-switch mode-toggle">
                    <input class="form-check-input" type="checkbox" @bind="AgentModeValue" id="flexSwitchCheckDefault">
                    <label class="form-check-label fw-bold" for="flexSwitchCheckDefault">
                        @(AgentModeService.UseAzureAIAgent ? "Azure AI Agent Mode" : "Phi-3 Sidecar Mode")
                    </label>
                </div>
            </div>
        </div>        @if (AgentModeService.UseAzureAIAgent)
        {
            <!-- AI Agent Chat Interface -->
            <div class="chat-container">
                <div class="chat-messages" id="chatMessages">
                    @if (chatHistory.Count == 0)
                    {
                        <div class="chat-message agent-message">
                            <div class="message-content">
                                <p>Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        @foreach (var msg in chatHistory)
                        {
                            <div class="chat-message @(msg.IsUser ? "user-message" : "agent-message")">
                                <div class="message-content">
                                    @if (msg.IsUser)
                                    {
                                        <p>@msg.Content</p>
                                    }
                                    else
                                    {
                                        <p>@((MarkupString)msg.Content)</p>
                                    }
                                </div>
                            </div>
                        }
                    }

                    @if (isLoading)
                    {
                        <div class="chat-message agent-message">
                            <div class="message-content typing-indicator">
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                            </div>
                        </div>
                    }
                </div>

                <div class="chat-input-container">
                    <input type="text" 
                           class="chat-input" 
                           placeholder="Type your message here..." 
                           @bind="chatMessage" 
                           @bind:event="oninput" 
                           @onkeypress="HandleKeyPress" />
                    <button class="chat-send-btn" @onclick="SendChatMessage" disabled="@(isLoading || string.IsNullOrWhiteSpace(chatMessage))">
                        <i class="bi bi-send-fill"></i>
                    </button>
                </div>
            </div>
        }
        else
        {
            <!-- Original Phi-3 Sidecar Interface -->
            <div class="form-group">
                <label for="sltProduct" class="form-label">Select a product</label>
                <select id="sltProduct" @bind="selectedProduct" class="form-control">
                    <option value="">Please select...</option>
                    @foreach (var product in products)
                    {
                        <option value="@product.Id">@product.Name</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="txtQuery" class="form-label">What would you like to know?</label>
                <textarea @bind="message" class="form-control" id="txtQuery" rows="3" cols="40"></textarea>
            </div>

            <div class="form-group text-end">
                <button class="btn btn-primary" @onclick="Send" disabled="@isLoading">Send</button>
            </div>
            
            @if (isLoading)
            {
                <div class="spinner-container">
                    <Spinner Color="SpinnerColor.Primary" />
                </div>
            }
            
            <div class="card mt-3 fixed-card">
                <div class="card-body fixed-card-body">
                    <p>@((MarkupString)(response ?? ""))</p>
                </div>
            </div>
        }
    </div>
</div>

<style>
    /* Center and top align the container */
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        min-height: 100vh;
        padding: 20px;
        text-align: center;
    }

    /* Narrow the heading */
    .page-title {
        font-size: 1.5em;
        width: auto;
        text-align: left;
    }

    /* Content styling */
    .content {
        width: 100%;
        max-width: 600px;
        text-align: left;
    }

    .form-group {
        margin-bottom: 15px;
        display: flex;
        flex-direction: column;
    }

    .form-label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 10px;
    }

    /* Mode toggle styling */
    .mode-toggle-container {
        padding: 8px 12px;
        background-color: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .mode-toggle .form-check-input {
        width: 3rem;
        height: 1.5rem;
        margin-right: 8px;
    }

    .mode-toggle .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .mode-toggle .form-check-label {
        font-size: 1rem;
        padding-top: 2px;
    }

    /* Spinner styling */
    .spinner-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    /* Fixed length for card body */
    .fixed-card {
        width: 100%;
        max-width: 600px;
    }

    .fixed-card-body {
        max-width: 550px;
        margin: 0 auto;
        padding: 15px;
        text-align: left;
        word-wrap: break-word;
    }
    
    /* Chat interface styling */
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 60vh;
        width: 100%;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        background-color: #f8f9fa;
    }
    
    .chat-message {
        display: flex;
        margin-bottom: 10px;
    }
    
    .user-message {
        justify-content: flex-end;
    }
    
    .agent-message {
        justify-content: flex-start;
    }
    
    .message-content {
        max-width: 70%;
        padding: 10px 15px;
        border-radius: 18px;
        word-wrap: break-word;
    }
    
    .user-message .message-content {
        background-color: #0d6efd;
        color: white;
        border-bottom-right-radius: 5px;
    }
    
    .agent-message .message-content {
        background-color: #e9ecef;
        color: #212529;
        border-bottom-left-radius: 5px;
    }
    
    .message-content p {
        margin: 0;
    }
    
    .chat-input-container {
        display: flex;
        padding: 15px;
        background-color: white;
        border-top: 1px solid #dee2e6;
    }
    
    .chat-input {
        flex-grow: 1;
        padding: 10px 15px;
        border: 1px solid #dee2e6;
        border-radius: 20px;
        outline: none;
        font-size: 1rem;
    }
    
    .chat-send-btn {
        width: 40px;
        height: 40px;
        border: none;
        background-color: #0d6efd;
        color: white;
        border-radius: 50%;
        margin-left: 10px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .chat-send-btn:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }
    
    /* Typing indicator */
    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 10px 15px;
    }
    
    .typing-dot {
        width: 8px;
        height: 8px;
        background-color: #6c757d;
        border-radius: 50%;
        margin: 0 2px;
        animation: typing-animation 1.4s infinite both;
    }
    
    .typing-dot:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .typing-dot:nth-child(3) {
        animation-delay: 0.4s;
    }
      @@keyframes typing-animation {
        0% {
            opacity: 0.6;
            transform: scale(0.8);
        }
        50% {
            opacity: 1;
            transform: scale(1);
        }
        100% {
            opacity: 0.6;
            transform: scale(0.8);
        }
    }
</style>

@code {
    // Property to handle two-way binding with the mode toggle
    private bool AgentModeValue
    {
        get => AgentModeService.UseAzureAIAgent;
        set
        {
            if (AgentModeService.UseAzureAIAgent != value)
            {
                AgentModeService.UseAzureAIAgent = value;
                OnAgentModeChangedAsync().ConfigureAwait(false);
            }
        }
    }
    
    // Track changes to AI Agent mode toggle
    private bool _previousAIAgentState = false;    // Flag to track whether history is being loaded
    private bool isLoadingHistory = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Set our initial state from the service
        _previousAIAgentState = AgentModeService.UseAzureAIAgent;
        
        // If we're in AI Agent mode and have a stored thread ID, use it
        if (AgentModeService.UseAzureAIAgent && !string.IsNullOrEmpty(AgentModeService.CurrentThreadId))
        {
            currentThreadId = AgentModeService.CurrentThreadId;
            
            // Add a welcome message while history loads
            if (chatHistory.Count == 0)
            {
                chatHistory.Add(new ChatMessage
                {
                    Content = "Loading conversation history...",
                    IsUser = false,
                    Timestamp = DateTime.Now
                });
            }
        }
        
        await base.OnInitializedAsync();
    }
      // This will be merged with the existing OnAfterRenderAsync method below
    
    // Load chat history asynchronously to avoid blocking page navigation
    private async Task LoadChatHistoryAsync()
    {
        // If we're in AI Agent mode and have a thread ID and haven't started loading history yet
        if (AgentModeService.UseAzureAIAgent && 
            !string.IsNullOrEmpty(AgentModeService.CurrentThreadId) && 
            !isLoadingHistory)
        {
            isLoadingHistory = true;
            
            try
            {
                var history = await AzureAIAgentService.GetThreadHistoryAsync(currentThreadId);
                
                // Update the chat history on the UI thread
                await InvokeAsync(() => {
                    chatHistory.Clear();
                    
                    // If no messages were loaded, add a welcome message
                    if (history.Count == 0)
                    {
                        chatHistory.Add(new ChatMessage
                        {
                            Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
                            IsUser = false,
                            Timestamp = DateTime.Now
                        });
                    }
                    else
                    {
                        // Add loaded history
                        chatHistory.AddRange(history);
                    }
                    
                    StateHasChanged();
                });
            }
            catch
            {
                // If there's an error loading history, show a friendly message
                await InvokeAsync(() => {
                    chatHistory.Clear();
                    chatHistory.Add(new ChatMessage
                    {
                        Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
                        IsUser = false,
                        Timestamp = DateTime.Now
                    });
                    StateHasChanged();
                });
            }
            finally
            {
                isLoadingHistory = false;
            }
        }
    }
    
    private async Task OnAgentModeChangedAsync()
    {
        // Check if mode has changed
        if (_previousAIAgentState != AgentModeService.UseAzureAIAgent)
        {
            // Reset UI elements based on the mode
            if (AgentModeService.UseAzureAIAgent)
            {
                // Switching to AI Agent mode - reset chat
                if (chatHistory.Count == 0)
                {
                    // No need to reset if already empty
                }
                else
                {
                    // Clear existing chat while keeping mode
                    chatHistory.Clear();
                }
                
                // Create a new thread if needed
                if (string.IsNullOrEmpty(currentThreadId))
                {
                    currentThreadId = await AzureAIAgentService.CreateThreadAsync();
                    AgentModeService.CurrentThreadId = currentThreadId;
                }
            }
            else
            {
                // Switching to Phi-3 Sidecar mode - reset the form
                message = null;
                response = null;
                selectedProduct = null;
            }
            
            // Update previous state
            _previousAIAgentState = AgentModeService.UseAzureAIAgent;
        }
    }
    
    private string? message { get; set; }
    private string? response;
    private string? selectedProduct { get; set; }
    private bool isLoading;// Chat interface properties
    private string? chatMessage { get; set; }
    private List<ChatMessage> chatHistory = new List<ChatMessage>();
    private string? currentThreadId; // Store the agent thread ID for conversation continuity

    private async Task Send()
    {
        response = string.Empty;
        isLoading = true;        if (string.IsNullOrEmpty(selectedProduct))
        {
            response = "Please select a product first.";
            isLoading = false;
            return;
        }
        
        // Use null-conditional operator to safely handle potential null result
        Product? selectedItem = products.Find(p => p.Id == int.Parse(selectedProduct));
        
        // Check if product was found
        if (selectedItem == null)
        {
            response = "Product not found. Please select a different product.";
            isLoading = false;
            return;
        }        if (AgentModeService.UseAzureAIAgent)
        {
            // Azure AI Agent Service mode (not yet implemented, using placeholder response)
            await Task.Delay(500); // Simulate a brief processing delay
            response = $"<b>Azure AI Agent Service Response:</b><br><br>I'm analyzing {selectedItem.Name}.<br><br>This feature will be fully implemented soon. For now, I can tell you that this is a high-quality product suitable for various occasions.<br><br>Feel free to ask more specific questions once this mode is fully implemented!";
        }
        else
        {
            // Original Phi-3 Sidecar mode
            var request = new HttpRequestMessage(HttpMethod.Post, configuration["FashionAssistantAPI:Url"] ?? throw new InvalidOperationException("FashionAssistantAPI:Url configuration is missing"));
            request.Headers.Add(HeaderNames.Accept, "application/json");
            var queryData = new Dictionary<string, string>
            {
                {"user_message", message ?? string.Empty},
                {"product_name", selectedItem.Name},
                {"product_description", selectedItem.Description }
            };

            request.Content = new StringContent(JsonSerializer.Serialize(queryData), Encoding.UTF8, "application/json");

            var client = HttpClientFactory.CreateClient();
            client.Timeout = TimeSpan.FromSeconds(120);

            using (HttpResponseMessage responseMessage = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))
            {
                responseMessage.EnsureSuccessStatusCode();

                if (responseMessage.Content is object)
                {
                    using (Stream streamToReadFrom = await responseMessage.Content.ReadAsStreamAsync())
                    {
                        using (StreamReader reader = new StreamReader(streamToReadFrom))
                        {
                            char[] buffer = new char[8192];
                            int bytesRead;
                            while ((bytesRead = await reader.ReadAsync(buffer, 0, buffer.Length)) > 0)
                            {
                                response += new string(buffer, 0, bytesRead);
                                StateHasChanged();
                            }
                        }
                    }
                }
            }
            
        // Format the response to display list items on separate lines
            response = response.Replace("1.", "<br>1.")
                              .Replace("2.", "<br>2.")
                              .Replace("3.", "<br>3.")
                              .Replace("4.", "<br>4.")
                              .Replace("5.", "<br>5.")
                              .Replace("-", "<br>-");
        }
        
        isLoading = false;
    }
      // Handle AI Agent chat functionality
    private async Task SendChatMessage()
    {
        if (string.IsNullOrWhiteSpace(chatMessage))
            return;
            
        // Add user message to chat history
        chatHistory.Add(new ChatMessage { 
            Content = chatMessage, 
            IsUser = true,
            Timestamp = DateTime.Now 
        });
        
        string userMessage = chatMessage;
        chatMessage = string.Empty; // Clear input field
        isLoading = true;
        StateHasChanged(); // Update UI to show user message
        
        try
        {
            // Create a thread if this is the first message
            if (string.IsNullOrEmpty(currentThreadId))
            {
                currentThreadId = await AzureAIAgentService.CreateThreadAsync();
            }
            
            // Send message to Azure AI Agent and get response
            string aiResponse = await AzureAIAgentService.SendMessageAsync(currentThreadId, userMessage);
            
            // Format the response for better HTML display
            aiResponse = FormatAgentResponse(aiResponse);
            
            // Add AI response to chat history
            chatHistory.Add(new ChatMessage { 
                Content = aiResponse, 
                IsUser = false,
                Timestamp = DateTime.Now 
            });
        }
        catch (Exception ex)
        {
            // Handle any errors during AI communication
            chatHistory.Add(new ChatMessage { 
                Content = $"Sorry, I encountered an error: {ex.Message}. Please try again later.", 
                IsUser = false,
                Timestamp = DateTime.Now 
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Update UI with AI response
            
            // Scroll to bottom of chat
            await ScrollToBottom();
        }
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(chatMessage) && !isLoading)
        {
            await SendChatMessage();
        }
    }
    
    private string FormatAgentResponse(string response)
    {
        // Format the response for better HTML display
        return response
            .Replace("\n\n", "<br><br>")
            .Replace("\n", "<br>")
            .Replace("•", "<br>•");
    }
    
    private async Task ScrollToBottom()
    {
        try
        {
            // Use JSRuntime to scroll to the bottom of the chat
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
        }
        catch
        {
            // Silently fail if JS interop fails
        }
    }
      protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register JS function for scrolling
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToBottom = function(elementId) {
                    var element = document.getElementById(elementId);
                    if (element) {
                        element.scrollTop = element.scrollHeight;
                    }
                }
            ");
            
            // Load chat history asynchronously after the first render for better performance
            await LoadChatHistoryAsync();
        }
        
        // Scroll to bottom whenever component rerenders
        await ScrollToBottom();
    }

    public static readonly List<Product> products = new List<Product>()
    {
        new Product { Id = 3, Name = "Navy Single-Breasted Slim Fit Formal Blazer", Description = "This navy single-breasted slim fit formal blazer is made from a blend of polyester and viscose. It features a notched lapel, a chest welt pocket, two flap pockets, a front button fastening, long sleeves, button cuffs, a double vent to the rear, and a full lining." },
        new Product { Id = 111, Name = "White & Navy Blue Slim Fit Printed Casual Shirt", Description = "White and navy blue printed casual shirt, has a spread collar, short sleeves, button placket, curved hem, one patch pocket" },
        new Product { Id = 116, Name = "Red Slim Fit Checked Casual Shirt", Description = "Red checked casual shirt, has a spread collar, long sleeves, button placket, curved hem, one patch pocket" },
        new Product { Id = 10, Name = "Navy Blue Washed Denim Jacket", Description = "Navy Blue washed denim jacket, has a spread collar, 4 pockets, button closure, long sleeves, straight hem, and unlined" }
    };    public class Product
    {
        public int Id { get; set; }
        public required string Name { get; set; }
        public required string Description { get; set; }

        public Product GetProduct(int Id) => products.Find(products => products.Id == Id) ?? throw new InvalidOperationException("Product not found");
    }
      // Removed duplicate ChatMessage class - using dotnetfashionassistant.Models.ChatMessage instead
}
